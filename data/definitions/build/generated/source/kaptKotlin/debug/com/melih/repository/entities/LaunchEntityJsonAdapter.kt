// Code generated by moshi-kotlin-codegen. Do not edit.
package com.melih.repository.entities

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonDataException
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import java.lang.NullPointerException
import kotlin.Long
import kotlin.String
import kotlin.collections.List

class LaunchEntityJsonAdapter(moshi: Moshi) : JsonAdapter<LaunchEntity>() {
    private val options: JsonReader.Options =
            JsonReader.Options.of("id", "name", "wsstamp", "westamp", "location", "rocket", "missions")

    private val longAdapter: JsonAdapter<Long> =
            moshi.adapter<Long>(Long::class.java, kotlin.collections.emptySet(), "id")

    private val stringAdapter: JsonAdapter<String> =
            moshi.adapter<String>(String::class.java, kotlin.collections.emptySet(), "name")

    private val locationEntityAdapter: JsonAdapter<LocationEntity> =
            moshi.adapter<LocationEntity>(LocationEntity::class.java, kotlin.collections.emptySet(), "location")

    private val rocketEntityAdapter: JsonAdapter<RocketEntity> =
            moshi.adapter<RocketEntity>(RocketEntity::class.java, kotlin.collections.emptySet(), "rocket")

    private val listOfMissionEntityAdapter: JsonAdapter<List<MissionEntity>> =
            moshi.adapter<List<MissionEntity>>(Types.newParameterizedType(List::class.java, MissionEntity::class.java), kotlin.collections.emptySet(), "missions")

    override fun toString(): String = "GeneratedJsonAdapter(LaunchEntity)"

    override fun fromJson(reader: JsonReader): LaunchEntity {
        var id: Long? = null
        var name: String? = null
        var launchStartTime: Long? = null
        var launchEndTime: Long? = null
        var location: LocationEntity? = null
        var rocket: RocketEntity? = null
        var missions: List<MissionEntity>? = null
        reader.beginObject()
        while (reader.hasNext()) {
            when (reader.selectName(options)) {
                0 -> id = longAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'id' was null at ${reader.path}")
                1 -> name = stringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'name' was null at ${reader.path}")
                2 -> launchStartTime = longAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'launchStartTime' was null at ${reader.path}")
                3 -> launchEndTime = longAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'launchEndTime' was null at ${reader.path}")
                4 -> location = locationEntityAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'location' was null at ${reader.path}")
                5 -> rocket = rocketEntityAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'rocket' was null at ${reader.path}")
                6 -> missions = listOfMissionEntityAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'missions' was null at ${reader.path}")
                -1 -> {
                    // Unknown name, skip it.
                    reader.skipName()
                    reader.skipValue()
                }
            }
        }
        reader.endObject()
        var result = LaunchEntity()
        result = result.copy(
                id = id ?: result.id,
                name = name ?: result.name,
                launchStartTime = launchStartTime ?: result.launchStartTime,
                launchEndTime = launchEndTime ?: result.launchEndTime,
                location = location ?: result.location,
                rocket = rocket ?: result.rocket,
                missions = missions ?: result.missions)
        return result
    }

    override fun toJson(writer: JsonWriter, value: LaunchEntity?) {
        if (value == null) {
            throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
        }
        writer.beginObject()
        writer.name("id")
        longAdapter.toJson(writer, value.id)
        writer.name("name")
        stringAdapter.toJson(writer, value.name)
        writer.name("wsstamp")
        longAdapter.toJson(writer, value.launchStartTime)
        writer.name("westamp")
        longAdapter.toJson(writer, value.launchEndTime)
        writer.name("location")
        locationEntityAdapter.toJson(writer, value.location)
        writer.name("rocket")
        rocketEntityAdapter.toJson(writer, value.rocket)
        writer.name("missions")
        listOfMissionEntityAdapter.toJson(writer, value.missions)
        writer.endObject()
    }
}
