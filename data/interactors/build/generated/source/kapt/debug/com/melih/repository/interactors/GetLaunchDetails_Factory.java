// Generated by Dagger (https://dagger.dev).
package com.melih.repository.interactors;

import com.melih.abstractions.mapper.Mapper;
import com.melih.interactors.sources.LaunchesSource;
import com.melih.repository.entities.LaunchEntity;
import dagger.internal.Factory;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class GetLaunchDetails_Factory<T> implements Factory<GetLaunchDetails<T>> {
  private final Provider<Mapper<LaunchEntity, T>> mapperProvider;

  private final Provider<LaunchesSource> launchesSourceProvider;

  public GetLaunchDetails_Factory(Provider<Mapper<LaunchEntity, T>> mapperProvider,
      Provider<LaunchesSource> launchesSourceProvider) {
    this.mapperProvider = mapperProvider;
    this.launchesSourceProvider = launchesSourceProvider;
  }

  @Override
  public GetLaunchDetails<T> get() {
    GetLaunchDetails<T> instance = new GetLaunchDetails<T>(mapperProvider.get());
    GetLaunchDetails_MembersInjector.injectLaunchesSource(instance, launchesSourceProvider.get());
    return instance;
  }

  public static <T> GetLaunchDetails_Factory<T> create(
      Provider<Mapper<LaunchEntity, T>> mapperProvider,
      Provider<LaunchesSource> launchesSourceProvider) {
    return new GetLaunchDetails_Factory<T>(mapperProvider, launchesSourceProvider);
  }

  public static <T> GetLaunchDetails<T> newInstance(Mapper<LaunchEntity, T> mapper) {
    return new GetLaunchDetails<T>(mapper);
  }
}
