// Code generated by moshi-kotlin-codegen. Do not edit.
package com.melih.repository.entities

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonDataException
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import java.lang.NullPointerException
import kotlin.Long
import kotlin.String

class MissionEntityJsonAdapter(moshi: Moshi) : JsonAdapter<MissionEntity>() {
    private val options: JsonReader.Options =
            JsonReader.Options.of("id", "name", "description", "typeName")

    private val longAdapter: JsonAdapter<Long> =
            moshi.adapter<Long>(Long::class.java, kotlin.collections.emptySet(), "id")

    private val stringAdapter: JsonAdapter<String> =
            moshi.adapter<String>(String::class.java, kotlin.collections.emptySet(), "name")

    override fun toString(): String = "GeneratedJsonAdapter(MissionEntity)"

    override fun fromJson(reader: JsonReader): MissionEntity {
        var id: Long? = null
        var name: String? = null
        var description: String? = null
        var typeName: String? = null
        reader.beginObject()
        while (reader.hasNext()) {
            when (reader.selectName(options)) {
                0 -> id = longAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'id' was null at ${reader.path}")
                1 -> name = stringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'name' was null at ${reader.path}")
                2 -> description = stringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'description' was null at ${reader.path}")
                3 -> typeName = stringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'typeName' was null at ${reader.path}")
                -1 -> {
                    // Unknown name, skip it.
                    reader.skipName()
                    reader.skipValue()
                }
            }
        }
        reader.endObject()
        var result = MissionEntity()
        result = result.copy(
                id = id ?: result.id,
                name = name ?: result.name,
                description = description ?: result.description,
                typeName = typeName ?: result.typeName)
        return result
    }

    override fun toJson(writer: JsonWriter, value: MissionEntity?) {
        if (value == null) {
            throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
        }
        writer.beginObject()
        writer.name("id")
        longAdapter.toJson(writer, value.id)
        writer.name("name")
        stringAdapter.toJson(writer, value.name)
        writer.name("description")
        stringAdapter.toJson(writer, value.description)
        writer.name("typeName")
        stringAdapter.toJson(writer, value.typeName)
        writer.endObject()
    }
}
